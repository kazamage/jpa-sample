apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'

configurations {
    provided
    querydslapt
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

tasks.withType(AbstractCompile) {
    it.options.encoding = defaultEncoding
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}
sourceSets.each {
    it.compileClasspath += configurations.provided
}
sourceSets.test.runtimeClasspath += configurations.provided

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework:spring-webmvc:$springVersion") {
        exclude module: 'commons-logging'
    }
    compile("org.springframework:spring-orm:$springVersion") {
        exclude module: 'commons-logging'
    }
    compile("org.springframework.data:spring-data-jpa:$springDataJpaVersion") {
        exclude module: 'commons-logging'
    }
    compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    compile "com.mysema.querydsl:querydsl-jpa:$querydslVersion"
    compile "org.aspectj:aspectjweaver:$aspectjVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "com.h2database:h2:$h2Version"

    provided "javax.inject:javax.inject:$injectApiVersion"
    provided "javax.servlet:javax.servlet-api:$servletApiVersion"

    querydslapt "com.mysema.querydsl:querydsl-apt:$querydslVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    testCompile("org.springframework:spring-test:$springVersion") {
        exclude module: 'commons-logging'
    }
}

idea {
    module {
        sourceDirs += file('src/main/generated')
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.provided + configurations.querydslapt
    options.encoding = defaultEncoding
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
